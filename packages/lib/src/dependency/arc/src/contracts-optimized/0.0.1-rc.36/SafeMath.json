{"contractName":"SafeMath","abi":[],"metadata":"{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-solidity/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\",\"urls\":[\"bzz-raw://31113152e1ddb78fe7a4197f247591ca894e93f916867beb708d8e747b6cc74f\",\"dweb:/ipfs/QmbZaJyXdpsYGykVhHH9qpVGQg9DGCxE2QufbCUy3daTgq\"]}},\"version\":1}","sourceMap":"589:4708:65:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24","deployedSourceMap":"589:4708:65:-;;;;;;;;","source":"pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n","sourcePath":"openzeppelin-solidity/contracts/math/SafeMath.sol","ast":{"absolutePath":"openzeppelin-solidity/contracts/math/SafeMath.sol","exportedSymbols":{"SafeMath":[19958]},"id":19959,"nodeType":"SourceUnit","nodes":[{"id":19773,"literals":["solidity","^","0.5",".0"],"nodeType":"PragmaDirective","src":"0:23:65"},{"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":"@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.","fullyImplemented":true,"id":19958,"linearizedBaseContracts":[19958],"name":"SafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":19797,"nodeType":"Block","src":"901:109:65","statements":[{"assignments":[19783],"declarations":[{"constant":false,"id":19783,"name":"c","nodeType":"VariableDeclaration","scope":19797,"src":"911:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19782,"name":"uint256","nodeType":"ElementaryTypeName","src":"911:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":19787,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19784,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19775,"src":"923:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":19785,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19777,"src":"927:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"923:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"911:17:65"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19789,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19783,"src":"946:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":19790,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19775,"src":"951:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"946:6:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","id":19792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"954:29:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""},"value":"SafeMath: addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"id":19788,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"938:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"938:46:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19794,"nodeType":"ExpressionStatement","src":"938:46:65"},{"expression":{"argumentTypes":null,"id":19795,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19783,"src":"1002:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19781,"id":19796,"nodeType":"Return","src":"995:8:65"}]},"documentation":"@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n- Addition cannot overflow.","id":19798,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","parameters":{"id":19778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19775,"name":"a","nodeType":"VariableDeclaration","scope":19798,"src":"847:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19774,"name":"uint256","nodeType":"ElementaryTypeName","src":"847:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19777,"name":"b","nodeType":"VariableDeclaration","scope":19798,"src":"858:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19776,"name":"uint256","nodeType":"ElementaryTypeName","src":"858:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"846:22:65"},"returnParameters":{"id":19781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19780,"name":"","nodeType":"VariableDeclaration","scope":19798,"src":"892:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19779,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"891:9:65"},"scope":19958,"src":"834:176:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19813,"nodeType":"Block","src":"1341:67:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19808,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19800,"src":"1362:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":19809,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19802,"src":"1365:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","id":19810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1368:32:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""},"value":"SafeMath: subtraction overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"id":19807,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[19814,19841],"referencedDeclaration":19841,"src":"1358:3:65","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":19811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1358:43:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19806,"id":19812,"nodeType":"Return","src":"1351:50:65"}]},"documentation":"@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.","id":19814,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":19803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19800,"name":"a","nodeType":"VariableDeclaration","scope":19814,"src":"1287:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1287:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19802,"name":"b","nodeType":"VariableDeclaration","scope":19814,"src":"1298:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19801,"name":"uint256","nodeType":"ElementaryTypeName","src":"1298:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1286:22:65"},"returnParameters":{"id":19806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19805,"name":"","nodeType":"VariableDeclaration","scope":19814,"src":"1332:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1332:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1331:9:65"},"scope":19958,"src":"1274:134:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19840,"nodeType":"Block","src":"1827:92:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19826,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19818,"src":"1845:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":19827,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19816,"src":"1850:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1845:6:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":19829,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19820,"src":"1853:12:65","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":19825,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"1837:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1837:29:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19831,"nodeType":"ExpressionStatement","src":"1837:29:65"},{"assignments":[19833],"declarations":[{"constant":false,"id":19833,"name":"c","nodeType":"VariableDeclaration","scope":19840,"src":"1876:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1876:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":19837,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19834,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19816,"src":"1888:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":19835,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19818,"src":"1892:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1888:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1876:17:65"},{"expression":{"argumentTypes":null,"id":19838,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19833,"src":"1911:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19824,"id":19839,"nodeType":"Return","src":"1904:8:65"}]},"documentation":"@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.\n     * _Available since v2.4.0._","id":19841,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":19821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19816,"name":"a","nodeType":"VariableDeclaration","scope":19841,"src":"1745:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19815,"name":"uint256","nodeType":"ElementaryTypeName","src":"1745:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19818,"name":"b","nodeType":"VariableDeclaration","scope":19841,"src":"1756:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19817,"name":"uint256","nodeType":"ElementaryTypeName","src":"1756:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19820,"name":"errorMessage","nodeType":"VariableDeclaration","scope":19841,"src":"1767:26:65","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":19819,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:65","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"1744:50:65"},"returnParameters":{"id":19824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19823,"name":"","nodeType":"VariableDeclaration","scope":19841,"src":"1818:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19822,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1817:9:65"},"scope":19958,"src":"1732:187:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19874,"nodeType":"Block","src":"2226:392:65","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19850,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19843,"src":"2458:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":19851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2463:1:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2458:6:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":19856,"nodeType":"IfStatement","src":"2454:45:65","trueBody":{"id":19855,"nodeType":"Block","src":"2466:33:65","statements":[{"expression":{"argumentTypes":null,"hexValue":"30","id":19853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2487:1:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":19849,"id":19854,"nodeType":"Return","src":"2480:8:65"}]}},{"assignments":[19858],"declarations":[{"constant":false,"id":19858,"name":"c","nodeType":"VariableDeclaration","scope":19874,"src":"2509:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19857,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":19862,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19859,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19843,"src":"2521:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":19860,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19845,"src":"2525:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2521:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2509:17:65"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19864,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19858,"src":"2544:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":19865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19843,"src":"2548:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2544:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":19867,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19845,"src":"2553:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2544:10:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","id":19869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2556:35:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""},"value":"SafeMath: multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"id":19863,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"2536:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2536:56:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19871,"nodeType":"ExpressionStatement","src":"2536:56:65"},{"expression":{"argumentTypes":null,"id":19872,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19858,"src":"2610:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19849,"id":19873,"nodeType":"Return","src":"2603:8:65"}]},"documentation":"@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n- Multiplication cannot overflow.","id":19875,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","parameters":{"id":19846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19843,"name":"a","nodeType":"VariableDeclaration","scope":19875,"src":"2172:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19842,"name":"uint256","nodeType":"ElementaryTypeName","src":"2172:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19845,"name":"b","nodeType":"VariableDeclaration","scope":19875,"src":"2183:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19844,"name":"uint256","nodeType":"ElementaryTypeName","src":"2183:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2171:22:65"},"returnParameters":{"id":19849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19848,"name":"","nodeType":"VariableDeclaration","scope":19875,"src":"2217:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19847,"name":"uint256","nodeType":"ElementaryTypeName","src":"2217:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2216:9:65"},"scope":19958,"src":"2159:459:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19890,"nodeType":"Block","src":"3140:63:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19885,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19877,"src":"3161:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":19886,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19879,"src":"3164:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206469766973696f6e206279207a65726f","id":19887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3167:28:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""},"value":"SafeMath: division by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"id":19884,"name":"div","nodeType":"Identifier","overloadedDeclarations":[19891,19918],"referencedDeclaration":19918,"src":"3157:3:65","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":19888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3157:39:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19883,"id":19889,"nodeType":"Return","src":"3150:46:65"}]},"documentation":"@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.","id":19891,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","parameters":{"id":19880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19877,"name":"a","nodeType":"VariableDeclaration","scope":19891,"src":"3086:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19876,"name":"uint256","nodeType":"ElementaryTypeName","src":"3086:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19879,"name":"b","nodeType":"VariableDeclaration","scope":19891,"src":"3097:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19878,"name":"uint256","nodeType":"ElementaryTypeName","src":"3097:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3085:22:65"},"returnParameters":{"id":19883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19882,"name":"","nodeType":"VariableDeclaration","scope":19891,"src":"3131:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19881,"name":"uint256","nodeType":"ElementaryTypeName","src":"3131:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3130:9:65"},"scope":19958,"src":"3073:130:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19917,"nodeType":"Block","src":"3813:243:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19903,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19895,"src":"3897:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":19904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3901:1:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3897:5:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":19906,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19897,"src":"3904:12:65","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":19902,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"3889:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3889:28:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19908,"nodeType":"ExpressionStatement","src":"3889:28:65"},{"assignments":[19910],"declarations":[{"constant":false,"id":19910,"name":"c","nodeType":"VariableDeclaration","scope":19917,"src":"3927:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19909,"name":"uint256","nodeType":"ElementaryTypeName","src":"3927:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":19914,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19911,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19893,"src":"3939:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":19912,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19895,"src":"3943:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3939:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3927:17:65"},{"expression":{"argumentTypes":null,"id":19915,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19910,"src":"4048:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19901,"id":19916,"nodeType":"Return","src":"4041:8:65"}]},"documentation":"@dev Returns the integer division of two unsigned integers. Reverts with custom message on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.\n     * _Available since v2.4.0._","id":19918,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","parameters":{"id":19898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19893,"name":"a","nodeType":"VariableDeclaration","scope":19918,"src":"3731:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19892,"name":"uint256","nodeType":"ElementaryTypeName","src":"3731:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19895,"name":"b","nodeType":"VariableDeclaration","scope":19918,"src":"3742:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19894,"name":"uint256","nodeType":"ElementaryTypeName","src":"3742:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19897,"name":"errorMessage","nodeType":"VariableDeclaration","scope":19918,"src":"3753:26:65","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":19896,"name":"string","nodeType":"ElementaryTypeName","src":"3753:6:65","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"3730:50:65"},"returnParameters":{"id":19901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19900,"name":"","nodeType":"VariableDeclaration","scope":19918,"src":"3804:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19899,"name":"uint256","nodeType":"ElementaryTypeName","src":"3804:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3803:9:65"},"scope":19958,"src":"3718:338:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19933,"nodeType":"Block","src":"4567:61:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19928,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19920,"src":"4588:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":19929,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19922,"src":"4591:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d6f64756c6f206279207a65726f","id":19930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4594:26:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""},"value":"SafeMath: modulo by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"id":19927,"name":"mod","nodeType":"Identifier","overloadedDeclarations":[19934,19957],"referencedDeclaration":19957,"src":"4584:3:65","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":19931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4584:37:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19926,"id":19932,"nodeType":"Return","src":"4577:44:65"}]},"documentation":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.","id":19934,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","parameters":{"id":19923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19920,"name":"a","nodeType":"VariableDeclaration","scope":19934,"src":"4513:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19919,"name":"uint256","nodeType":"ElementaryTypeName","src":"4513:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19922,"name":"b","nodeType":"VariableDeclaration","scope":19934,"src":"4524:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19921,"name":"uint256","nodeType":"ElementaryTypeName","src":"4524:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4512:22:65"},"returnParameters":{"id":19926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19925,"name":"","nodeType":"VariableDeclaration","scope":19934,"src":"4558:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19924,"name":"uint256","nodeType":"ElementaryTypeName","src":"4558:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4557:9:65"},"scope":19958,"src":"4500:128:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19956,"nodeType":"Block","src":"5227:68:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19946,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19938,"src":"5245:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":19947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5250:1:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5245:6:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":19949,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19940,"src":"5253:12:65","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":19945,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"5237:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5237:29:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19951,"nodeType":"ExpressionStatement","src":"5237:29:65"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19952,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19936,"src":"5283:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"id":19953,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19938,"src":"5287:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5283:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19944,"id":19955,"nodeType":"Return","src":"5276:12:65"}]},"documentation":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts with custom message when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.\n     * _Available since v2.4.0._","id":19957,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","parameters":{"id":19941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19936,"name":"a","nodeType":"VariableDeclaration","scope":19957,"src":"5145:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19935,"name":"uint256","nodeType":"ElementaryTypeName","src":"5145:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19938,"name":"b","nodeType":"VariableDeclaration","scope":19957,"src":"5156:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19937,"name":"uint256","nodeType":"ElementaryTypeName","src":"5156:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19940,"name":"errorMessage","nodeType":"VariableDeclaration","scope":19957,"src":"5167:26:65","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":19939,"name":"string","nodeType":"ElementaryTypeName","src":"5167:6:65","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"5144:50:65"},"returnParameters":{"id":19944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19943,"name":"","nodeType":"VariableDeclaration","scope":19957,"src":"5218:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19942,"name":"uint256","nodeType":"ElementaryTypeName","src":"5218:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5217:9:65"},"scope":19958,"src":"5132:163:65","stateMutability":"pure","superFunction":null,"visibility":"internal"}],"scope":19959,"src":"589:4708:65"}],"src":"0:5298:65"},"legacyAST":{"absolutePath":"openzeppelin-solidity/contracts/math/SafeMath.sol","exportedSymbols":{"SafeMath":[19958]},"id":19959,"nodeType":"SourceUnit","nodes":[{"id":19773,"literals":["solidity","^","0.5",".0"],"nodeType":"PragmaDirective","src":"0:23:65"},{"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":"@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.","fullyImplemented":true,"id":19958,"linearizedBaseContracts":[19958],"name":"SafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":19797,"nodeType":"Block","src":"901:109:65","statements":[{"assignments":[19783],"declarations":[{"constant":false,"id":19783,"name":"c","nodeType":"VariableDeclaration","scope":19797,"src":"911:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19782,"name":"uint256","nodeType":"ElementaryTypeName","src":"911:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":19787,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19784,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19775,"src":"923:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":19785,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19777,"src":"927:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"923:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"911:17:65"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19789,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19783,"src":"946:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":19790,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19775,"src":"951:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"946:6:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","id":19792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"954:29:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""},"value":"SafeMath: addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"id":19788,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"938:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"938:46:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19794,"nodeType":"ExpressionStatement","src":"938:46:65"},{"expression":{"argumentTypes":null,"id":19795,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19783,"src":"1002:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19781,"id":19796,"nodeType":"Return","src":"995:8:65"}]},"documentation":"@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n- Addition cannot overflow.","id":19798,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","parameters":{"id":19778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19775,"name":"a","nodeType":"VariableDeclaration","scope":19798,"src":"847:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19774,"name":"uint256","nodeType":"ElementaryTypeName","src":"847:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19777,"name":"b","nodeType":"VariableDeclaration","scope":19798,"src":"858:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19776,"name":"uint256","nodeType":"ElementaryTypeName","src":"858:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"846:22:65"},"returnParameters":{"id":19781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19780,"name":"","nodeType":"VariableDeclaration","scope":19798,"src":"892:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19779,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"891:9:65"},"scope":19958,"src":"834:176:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19813,"nodeType":"Block","src":"1341:67:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19808,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19800,"src":"1362:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":19809,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19802,"src":"1365:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","id":19810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1368:32:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""},"value":"SafeMath: subtraction overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"id":19807,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[19814,19841],"referencedDeclaration":19841,"src":"1358:3:65","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":19811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1358:43:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19806,"id":19812,"nodeType":"Return","src":"1351:50:65"}]},"documentation":"@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.","id":19814,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":19803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19800,"name":"a","nodeType":"VariableDeclaration","scope":19814,"src":"1287:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1287:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19802,"name":"b","nodeType":"VariableDeclaration","scope":19814,"src":"1298:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19801,"name":"uint256","nodeType":"ElementaryTypeName","src":"1298:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1286:22:65"},"returnParameters":{"id":19806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19805,"name":"","nodeType":"VariableDeclaration","scope":19814,"src":"1332:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1332:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1331:9:65"},"scope":19958,"src":"1274:134:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19840,"nodeType":"Block","src":"1827:92:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19826,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19818,"src":"1845:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":19827,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19816,"src":"1850:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1845:6:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":19829,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19820,"src":"1853:12:65","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":19825,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"1837:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1837:29:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19831,"nodeType":"ExpressionStatement","src":"1837:29:65"},{"assignments":[19833],"declarations":[{"constant":false,"id":19833,"name":"c","nodeType":"VariableDeclaration","scope":19840,"src":"1876:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1876:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":19837,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19834,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19816,"src":"1888:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":19835,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19818,"src":"1892:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1888:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1876:17:65"},{"expression":{"argumentTypes":null,"id":19838,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19833,"src":"1911:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19824,"id":19839,"nodeType":"Return","src":"1904:8:65"}]},"documentation":"@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.\n     * _Available since v2.4.0._","id":19841,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":19821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19816,"name":"a","nodeType":"VariableDeclaration","scope":19841,"src":"1745:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19815,"name":"uint256","nodeType":"ElementaryTypeName","src":"1745:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19818,"name":"b","nodeType":"VariableDeclaration","scope":19841,"src":"1756:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19817,"name":"uint256","nodeType":"ElementaryTypeName","src":"1756:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19820,"name":"errorMessage","nodeType":"VariableDeclaration","scope":19841,"src":"1767:26:65","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":19819,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:65","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"1744:50:65"},"returnParameters":{"id":19824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19823,"name":"","nodeType":"VariableDeclaration","scope":19841,"src":"1818:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19822,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1817:9:65"},"scope":19958,"src":"1732:187:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19874,"nodeType":"Block","src":"2226:392:65","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19850,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19843,"src":"2458:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":19851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2463:1:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2458:6:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":19856,"nodeType":"IfStatement","src":"2454:45:65","trueBody":{"id":19855,"nodeType":"Block","src":"2466:33:65","statements":[{"expression":{"argumentTypes":null,"hexValue":"30","id":19853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2487:1:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":19849,"id":19854,"nodeType":"Return","src":"2480:8:65"}]}},{"assignments":[19858],"declarations":[{"constant":false,"id":19858,"name":"c","nodeType":"VariableDeclaration","scope":19874,"src":"2509:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19857,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":19862,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19859,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19843,"src":"2521:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":19860,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19845,"src":"2525:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2521:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2509:17:65"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19864,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19858,"src":"2544:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":19865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19843,"src":"2548:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2544:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":19867,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19845,"src":"2553:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2544:10:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","id":19869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2556:35:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""},"value":"SafeMath: multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"id":19863,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"2536:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2536:56:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19871,"nodeType":"ExpressionStatement","src":"2536:56:65"},{"expression":{"argumentTypes":null,"id":19872,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19858,"src":"2610:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19849,"id":19873,"nodeType":"Return","src":"2603:8:65"}]},"documentation":"@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n- Multiplication cannot overflow.","id":19875,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","parameters":{"id":19846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19843,"name":"a","nodeType":"VariableDeclaration","scope":19875,"src":"2172:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19842,"name":"uint256","nodeType":"ElementaryTypeName","src":"2172:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19845,"name":"b","nodeType":"VariableDeclaration","scope":19875,"src":"2183:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19844,"name":"uint256","nodeType":"ElementaryTypeName","src":"2183:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2171:22:65"},"returnParameters":{"id":19849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19848,"name":"","nodeType":"VariableDeclaration","scope":19875,"src":"2217:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19847,"name":"uint256","nodeType":"ElementaryTypeName","src":"2217:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2216:9:65"},"scope":19958,"src":"2159:459:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19890,"nodeType":"Block","src":"3140:63:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19885,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19877,"src":"3161:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":19886,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19879,"src":"3164:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206469766973696f6e206279207a65726f","id":19887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3167:28:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""},"value":"SafeMath: division by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"id":19884,"name":"div","nodeType":"Identifier","overloadedDeclarations":[19891,19918],"referencedDeclaration":19918,"src":"3157:3:65","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":19888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3157:39:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19883,"id":19889,"nodeType":"Return","src":"3150:46:65"}]},"documentation":"@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.","id":19891,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","parameters":{"id":19880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19877,"name":"a","nodeType":"VariableDeclaration","scope":19891,"src":"3086:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19876,"name":"uint256","nodeType":"ElementaryTypeName","src":"3086:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19879,"name":"b","nodeType":"VariableDeclaration","scope":19891,"src":"3097:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19878,"name":"uint256","nodeType":"ElementaryTypeName","src":"3097:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3085:22:65"},"returnParameters":{"id":19883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19882,"name":"","nodeType":"VariableDeclaration","scope":19891,"src":"3131:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19881,"name":"uint256","nodeType":"ElementaryTypeName","src":"3131:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3130:9:65"},"scope":19958,"src":"3073:130:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19917,"nodeType":"Block","src":"3813:243:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19903,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19895,"src":"3897:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":19904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3901:1:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3897:5:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":19906,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19897,"src":"3904:12:65","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":19902,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"3889:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3889:28:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19908,"nodeType":"ExpressionStatement","src":"3889:28:65"},{"assignments":[19910],"declarations":[{"constant":false,"id":19910,"name":"c","nodeType":"VariableDeclaration","scope":19917,"src":"3927:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19909,"name":"uint256","nodeType":"ElementaryTypeName","src":"3927:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":19914,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19911,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19893,"src":"3939:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":19912,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19895,"src":"3943:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3939:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3927:17:65"},{"expression":{"argumentTypes":null,"id":19915,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19910,"src":"4048:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19901,"id":19916,"nodeType":"Return","src":"4041:8:65"}]},"documentation":"@dev Returns the integer division of two unsigned integers. Reverts with custom message on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.\n     * _Available since v2.4.0._","id":19918,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","parameters":{"id":19898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19893,"name":"a","nodeType":"VariableDeclaration","scope":19918,"src":"3731:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19892,"name":"uint256","nodeType":"ElementaryTypeName","src":"3731:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19895,"name":"b","nodeType":"VariableDeclaration","scope":19918,"src":"3742:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19894,"name":"uint256","nodeType":"ElementaryTypeName","src":"3742:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19897,"name":"errorMessage","nodeType":"VariableDeclaration","scope":19918,"src":"3753:26:65","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":19896,"name":"string","nodeType":"ElementaryTypeName","src":"3753:6:65","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"3730:50:65"},"returnParameters":{"id":19901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19900,"name":"","nodeType":"VariableDeclaration","scope":19918,"src":"3804:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19899,"name":"uint256","nodeType":"ElementaryTypeName","src":"3804:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3803:9:65"},"scope":19958,"src":"3718:338:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19933,"nodeType":"Block","src":"4567:61:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19928,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19920,"src":"4588:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":19929,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19922,"src":"4591:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d6f64756c6f206279207a65726f","id":19930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4594:26:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""},"value":"SafeMath: modulo by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"id":19927,"name":"mod","nodeType":"Identifier","overloadedDeclarations":[19934,19957],"referencedDeclaration":19957,"src":"4584:3:65","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":19931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4584:37:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19926,"id":19932,"nodeType":"Return","src":"4577:44:65"}]},"documentation":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.","id":19934,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","parameters":{"id":19923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19920,"name":"a","nodeType":"VariableDeclaration","scope":19934,"src":"4513:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19919,"name":"uint256","nodeType":"ElementaryTypeName","src":"4513:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19922,"name":"b","nodeType":"VariableDeclaration","scope":19934,"src":"4524:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19921,"name":"uint256","nodeType":"ElementaryTypeName","src":"4524:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4512:22:65"},"returnParameters":{"id":19926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19925,"name":"","nodeType":"VariableDeclaration","scope":19934,"src":"4558:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19924,"name":"uint256","nodeType":"ElementaryTypeName","src":"4558:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4557:9:65"},"scope":19958,"src":"4500:128:65","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19956,"nodeType":"Block","src":"5227:68:65","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19946,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19938,"src":"5245:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":19947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5250:1:65","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5245:6:65","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":19949,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19940,"src":"5253:12:65","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":19945,"name":"require","nodeType":"Identifier","overloadedDeclarations":[20673,20674],"referencedDeclaration":20674,"src":"5237:7:65","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":19950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5237:29:65","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":19951,"nodeType":"ExpressionStatement","src":"5237:29:65"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19952,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19936,"src":"5283:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"id":19953,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19938,"src":"5287:1:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5283:5:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":19944,"id":19955,"nodeType":"Return","src":"5276:12:65"}]},"documentation":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts with custom message when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.\n     * _Available since v2.4.0._","id":19957,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","parameters":{"id":19941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19936,"name":"a","nodeType":"VariableDeclaration","scope":19957,"src":"5145:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19935,"name":"uint256","nodeType":"ElementaryTypeName","src":"5145:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19938,"name":"b","nodeType":"VariableDeclaration","scope":19957,"src":"5156:9:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19937,"name":"uint256","nodeType":"ElementaryTypeName","src":"5156:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":19940,"name":"errorMessage","nodeType":"VariableDeclaration","scope":19957,"src":"5167:26:65","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":19939,"name":"string","nodeType":"ElementaryTypeName","src":"5167:6:65","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"5144:50:65"},"returnParameters":{"id":19944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19943,"name":"","nodeType":"VariableDeclaration","scope":19957,"src":"5218:7:65","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19942,"name":"uint256","nodeType":"ElementaryTypeName","src":"5218:7:65","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5217:9:65"},"scope":19958,"src":"5132:163:65","stateMutability":"pure","superFunction":null,"visibility":"internal"}],"scope":19959,"src":"589:4708:65"}],"src":"0:5298:65"},"compiler":{"name":"solc","version":"0.5.13+commit.5b0b510c.Emscripten.clang"},"networks":{},"schemaVersion":"3.0.14","updatedAt":"2019-12-09T10:59:45.706Z","devdoc":{"details":"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","methods":{}},"userdoc":{"methods":{}}}