{"contractName":"ECDSA","abi":[],"metadata":"{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. * These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\":{\"keccak256\":\"0xc89ea7e48ba477b1781b24ae963442fff1bb2af33b6178dad679a3fa2f5ab2de\",\"urls\":[\"bzz-raw://b736ddad8143f8f1cd13c20809d4ebce5f5a8c7725081b0b703294078bd506d1\",\"dweb:/ipfs/QmdhTWCXFCuwG9JaPMjwnhkQoDj9su8R7KMPNvD5z9KeWD\"]}},\"version\":1}","sourceMap":"231:3417:63:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24","deployedSourceMap":"231:3417:63:-;;;;;;;;","source":"pragma solidity ^0.5.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * NOTE: This call _does not revert_ if the signature is invalid, or\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\n     * the zero address is returned.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return address(0);\n        }\n\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        return ecrecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n","sourcePath":"openzeppelin-solidity/contracts/cryptography/ECDSA.sol","ast":{"absolutePath":"openzeppelin-solidity/contracts/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[19702]},"id":19703,"nodeType":"SourceUnit","nodes":[{"id":19623,"literals":["solidity","^","0.5",".0"],"nodeType":"PragmaDirective","src":"0:23:63"},{"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":"@dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n * These functions can be used to verify that a message was signed by the holder\nof the private keys of a given address.","fullyImplemented":true,"id":19702,"linearizedBaseContracts":[19702],"name":"ECDSA","nodeType":"ContractDefinition","nodes":[{"body":{"id":19684,"nodeType":"Block","src":"1313:1804:63","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":19632,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19627,"src":"1365:9:63","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":19633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1365:16:63","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"3635","id":19634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:2:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"1365:22:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":19642,"nodeType":"IfStatement","src":"1361:72:63","trueBody":{"id":19641,"nodeType":"Block","src":"1389:44:63","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":19637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1419:1:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":19636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1411:7:63","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":19638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1411:10:63","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"id":19639,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1410:12:63","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":19631,"id":19640,"nodeType":"Return","src":"1403:19:63"}]}},{"assignments":[19644],"declarations":[{"constant":false,"id":19644,"name":"r","nodeType":"VariableDeclaration","scope":19684,"src":"1499:9:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19643,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1499:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":19645,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"1499:9:63"},{"assignments":[19647],"declarations":[{"constant":false,"id":19647,"name":"s","nodeType":"VariableDeclaration","scope":19684,"src":"1518:9:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1518:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":19648,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"1518:9:63"},{"assignments":[19650],"declarations":[{"constant":false,"id":19650,"name":"v","nodeType":"VariableDeclaration","scope":19684,"src":"1537:7:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":19649,"name":"uint8","nodeType":"ElementaryTypeName","src":"1537:5:63","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"}],"id":19651,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"1537:7:63"},{"externalReferences":[{"r":{"declaration":19644,"isOffset":false,"isSlot":false,"src":"1757:1:63","valueSize":1}},{"signature":{"declaration":19627,"isOffset":false,"isSlot":false,"src":"1772:9:63","valueSize":1}},{"v":{"declaration":19650,"isOffset":false,"isSlot":false,"src":"1847:1:63","valueSize":1}},{"s":{"declaration":19647,"isOffset":false,"isSlot":false,"src":"1802:1:63","valueSize":1}},{"signature":{"declaration":19627,"isOffset":false,"isSlot":false,"src":"1817:9:63","valueSize":1}},{"signature":{"declaration":19627,"isOffset":false,"isSlot":false,"src":"1870:9:63","valueSize":1}}],"id":19652,"nodeType":"InlineAssembly","operations":"{\n    r := mload(add(signature, 0x20))\n    s := mload(add(signature, 0x40))\n    v := byte(0, mload(add(signature, 0x60)))\n}","src":"1734:164:63"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19654,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19647,"src":"2794:1:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":19653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2786:7:63","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint256"},"id":19655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2786:10:63","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":19656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2799:66:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"2786:79:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":19663,"nodeType":"IfStatement","src":"2782:127:63","trueBody":{"id":19662,"nodeType":"Block","src":"2867:42:63","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":19659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2896:1:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":19658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2888:7:63","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":19660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2888:10:63","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":19631,"id":19661,"nodeType":"Return","src":"2881:17:63"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":19670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":19666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19664,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19650,"src":"2923:1:63","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"3237","id":19665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2928:2:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"2923:7:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":19669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19667,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19650,"src":"2934:1:63","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"3238","id":19668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2939:2:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"28"},"src":"2934:7:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2923:18:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":19676,"nodeType":"IfStatement","src":"2919:66:63","trueBody":{"id":19675,"nodeType":"Block","src":"2943:42:63","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":19672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2972:1:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":19671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2964:7:63","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":19673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2964:10:63","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":19631,"id":19674,"nodeType":"Return","src":"2957:17:63"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19678,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19625,"src":"3096:4:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":19679,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19650,"src":"3102:1:63","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"argumentTypes":null,"id":19680,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19644,"src":"3105:1:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":19681,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19647,"src":"3108:1:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":19677,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20662,"src":"3086:9:63","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":19682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3086:24:63","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":19631,"id":19683,"nodeType":"Return","src":"3079:31:63"}]},"documentation":"@dev Returns the address that signed a hashed message (`hash`) with\n`signature`. This address can then be used for verification purposes.\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\nthis function rejects them by requiring the `s` value to be in the lower\nhalf order, and the `v` value to be either 27 or 28.\n     * NOTE: This call _does not revert_ if the signature is invalid, or\nif the signer is otherwise unable to be retrieved. In those scenarios,\nthe zero address is returned.\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\nverification to be secure: it is possible to craft signatures that\nrecover to arbitrary addresses for non-hashed data. A safe way to ensure\nthis is by receiving a hash of the original message (which may otherwise\nbe too long), and then calling {toEthSignedMessageHash} on it.","id":19685,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nodeType":"FunctionDefinition","parameters":{"id":19628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19625,"name":"hash","nodeType":"VariableDeclaration","scope":19685,"src":"1243:12:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19624,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1243:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":19627,"name":"signature","nodeType":"VariableDeclaration","scope":19685,"src":"1257:22:63","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":19626,"name":"bytes","nodeType":"ElementaryTypeName","src":"1257:5:63","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"1242:38:63"},"returnParameters":{"id":19631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19630,"name":"","nodeType":"VariableDeclaration","scope":19685,"src":"1304:7:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19629,"name":"address","nodeType":"ElementaryTypeName","src":"1304:7:63","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1303:9:63"},"scope":19702,"src":"1226:1891:63","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19700,"nodeType":"Block","src":"3459:187:63","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":19695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3597:34:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string \"\u0019Ethereum Signed Message:\n32\""},"value":"\u0019Ethereum Signed Message:\n32"},{"argumentTypes":null,"id":19696,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19687,"src":"3633:4:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string \"\u0019Ethereum Signed Message:\n32\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"argumentTypes":null,"id":19693,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20657,"src":"3580:3:63","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":19694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3580:16:63","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":19697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3580:58:63","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":19692,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20664,"src":"3570:9:63","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":19698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3570:69:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":19691,"id":19699,"nodeType":"Return","src":"3563:76:63"}]},"documentation":"@dev Returns an Ethereum Signed Message, created from a `hash`. This\nreplicates the behavior of the\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\nJSON-RPC method.\n     * See {recover}.","id":19701,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nodeType":"FunctionDefinition","parameters":{"id":19688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19687,"name":"hash","nodeType":"VariableDeclaration","scope":19701,"src":"3413:12:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3413:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"3412:14:63"},"returnParameters":{"id":19691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19690,"name":"","nodeType":"VariableDeclaration","scope":19701,"src":"3450:7:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19689,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3450:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"3449:9:63"},"scope":19702,"src":"3381:265:63","stateMutability":"pure","superFunction":null,"visibility":"internal"}],"scope":19703,"src":"231:3417:63"}],"src":"0:3649:63"},"legacyAST":{"absolutePath":"openzeppelin-solidity/contracts/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[19702]},"id":19703,"nodeType":"SourceUnit","nodes":[{"id":19623,"literals":["solidity","^","0.5",".0"],"nodeType":"PragmaDirective","src":"0:23:63"},{"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":"@dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n * These functions can be used to verify that a message was signed by the holder\nof the private keys of a given address.","fullyImplemented":true,"id":19702,"linearizedBaseContracts":[19702],"name":"ECDSA","nodeType":"ContractDefinition","nodes":[{"body":{"id":19684,"nodeType":"Block","src":"1313:1804:63","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":19632,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19627,"src":"1365:9:63","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":19633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1365:16:63","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"3635","id":19634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:2:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"1365:22:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":19642,"nodeType":"IfStatement","src":"1361:72:63","trueBody":{"id":19641,"nodeType":"Block","src":"1389:44:63","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":19637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1419:1:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":19636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1411:7:63","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":19638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1411:10:63","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"id":19639,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1410:12:63","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":19631,"id":19640,"nodeType":"Return","src":"1403:19:63"}]}},{"assignments":[19644],"declarations":[{"constant":false,"id":19644,"name":"r","nodeType":"VariableDeclaration","scope":19684,"src":"1499:9:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19643,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1499:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":19645,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"1499:9:63"},{"assignments":[19647],"declarations":[{"constant":false,"id":19647,"name":"s","nodeType":"VariableDeclaration","scope":19684,"src":"1518:9:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1518:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":19648,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"1518:9:63"},{"assignments":[19650],"declarations":[{"constant":false,"id":19650,"name":"v","nodeType":"VariableDeclaration","scope":19684,"src":"1537:7:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":19649,"name":"uint8","nodeType":"ElementaryTypeName","src":"1537:5:63","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"}],"id":19651,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"1537:7:63"},{"externalReferences":[{"r":{"declaration":19644,"isOffset":false,"isSlot":false,"src":"1757:1:63","valueSize":1}},{"signature":{"declaration":19627,"isOffset":false,"isSlot":false,"src":"1772:9:63","valueSize":1}},{"v":{"declaration":19650,"isOffset":false,"isSlot":false,"src":"1847:1:63","valueSize":1}},{"s":{"declaration":19647,"isOffset":false,"isSlot":false,"src":"1802:1:63","valueSize":1}},{"signature":{"declaration":19627,"isOffset":false,"isSlot":false,"src":"1817:9:63","valueSize":1}},{"signature":{"declaration":19627,"isOffset":false,"isSlot":false,"src":"1870:9:63","valueSize":1}}],"id":19652,"nodeType":"InlineAssembly","operations":"{\n    r := mload(add(signature, 0x20))\n    s := mload(add(signature, 0x40))\n    v := byte(0, mload(add(signature, 0x60)))\n}","src":"1734:164:63"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":19657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19654,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19647,"src":"2794:1:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":19653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2786:7:63","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint256"},"id":19655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2786:10:63","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":19656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2799:66:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"2786:79:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":19663,"nodeType":"IfStatement","src":"2782:127:63","trueBody":{"id":19662,"nodeType":"Block","src":"2867:42:63","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":19659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2896:1:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":19658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2888:7:63","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":19660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2888:10:63","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":19631,"id":19661,"nodeType":"Return","src":"2881:17:63"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":19670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":19666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19664,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19650,"src":"2923:1:63","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"3237","id":19665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2928:2:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"2923:7:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":19669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":19667,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19650,"src":"2934:1:63","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"3238","id":19668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2939:2:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"28"},"src":"2934:7:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2923:18:63","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":19676,"nodeType":"IfStatement","src":"2919:66:63","trueBody":{"id":19675,"nodeType":"Block","src":"2943:42:63","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":19672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2972:1:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":19671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2964:7:63","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":19673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2964:10:63","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":19631,"id":19674,"nodeType":"Return","src":"2957:17:63"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":19678,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19625,"src":"3096:4:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":19679,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19650,"src":"3102:1:63","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"argumentTypes":null,"id":19680,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19644,"src":"3105:1:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":19681,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19647,"src":"3108:1:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":19677,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20662,"src":"3086:9:63","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":19682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3086:24:63","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":19631,"id":19683,"nodeType":"Return","src":"3079:31:63"}]},"documentation":"@dev Returns the address that signed a hashed message (`hash`) with\n`signature`. This address can then be used for verification purposes.\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\nthis function rejects them by requiring the `s` value to be in the lower\nhalf order, and the `v` value to be either 27 or 28.\n     * NOTE: This call _does not revert_ if the signature is invalid, or\nif the signer is otherwise unable to be retrieved. In those scenarios,\nthe zero address is returned.\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\nverification to be secure: it is possible to craft signatures that\nrecover to arbitrary addresses for non-hashed data. A safe way to ensure\nthis is by receiving a hash of the original message (which may otherwise\nbe too long), and then calling {toEthSignedMessageHash} on it.","id":19685,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nodeType":"FunctionDefinition","parameters":{"id":19628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19625,"name":"hash","nodeType":"VariableDeclaration","scope":19685,"src":"1243:12:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19624,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1243:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":19627,"name":"signature","nodeType":"VariableDeclaration","scope":19685,"src":"1257:22:63","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":19626,"name":"bytes","nodeType":"ElementaryTypeName","src":"1257:5:63","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"1242:38:63"},"returnParameters":{"id":19631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19630,"name":"","nodeType":"VariableDeclaration","scope":19685,"src":"1304:7:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19629,"name":"address","nodeType":"ElementaryTypeName","src":"1304:7:63","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1303:9:63"},"scope":19702,"src":"1226:1891:63","stateMutability":"pure","superFunction":null,"visibility":"internal"},{"body":{"id":19700,"nodeType":"Block","src":"3459:187:63","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":19695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3597:34:63","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string \"\u0019Ethereum Signed Message:\n32\""},"value":"\u0019Ethereum Signed Message:\n32"},{"argumentTypes":null,"id":19696,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19687,"src":"3633:4:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string \"\u0019Ethereum Signed Message:\n32\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"argumentTypes":null,"id":19693,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20657,"src":"3580:3:63","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":19694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3580:16:63","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":19697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3580:58:63","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":19692,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20664,"src":"3570:9:63","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":19698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3570:69:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":19691,"id":19699,"nodeType":"Return","src":"3563:76:63"}]},"documentation":"@dev Returns an Ethereum Signed Message, created from a `hash`. This\nreplicates the behavior of the\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\nJSON-RPC method.\n     * See {recover}.","id":19701,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nodeType":"FunctionDefinition","parameters":{"id":19688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19687,"name":"hash","nodeType":"VariableDeclaration","scope":19701,"src":"3413:12:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3413:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"3412:14:63"},"returnParameters":{"id":19691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19690,"name":"","nodeType":"VariableDeclaration","scope":19701,"src":"3450:7:63","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19689,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3450:7:63","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"3449:9:63"},"scope":19702,"src":"3381:265:63","stateMutability":"pure","superFunction":null,"visibility":"internal"}],"scope":19703,"src":"231:3417:63"}],"src":"0:3649:63"},"compiler":{"name":"solc","version":"0.5.13+commit.5b0b510c.Emscripten.clang"},"networks":{},"schemaVersion":"3.0.14","updatedAt":"2019-12-09T10:59:45.705Z","devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. * These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","methods":{}},"userdoc":{"methods":{}}}