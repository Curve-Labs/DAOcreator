{"contractName":"ERC827TokenMock","abi":[{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"increaseApprovalAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"decreaseApprovalAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"initialAccount","type":"address"},{"internalType":"uint256","name":"initialBalance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"}],"metadata":"{\"compiler\":{\"version\":\"0.5.11+commit.c082d0b4\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"increaseApprovalAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"decreaseApprovalAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"See `IERC20.allowance`.\"},\"approve(address,uint256)\":{\"details\":\"See `IERC20.approve`.     * Requirements:     * - `spender` cannot be the zero address.\"},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Addition to IERC20 token methods. It allows to approve the transfer of value and execute a call with the sent data. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_data\":\"ABI-encoded contract call to call `_spender` address.\",\"_spender\":\"The address that will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"},\"return\":\"true if the call function was executed successfully\"},\"balanceOf(address)\":{\"details\":\"See `IERC20.balanceOf`.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to `approve` that can be used as a mitigation for problems described in `IERC20.approve`.     * Emits an `Approval` event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"decreaseApprovalAndCall(address,uint256,bytes)\":{\"details\":\"Addition to IERC20 methods. Decrease the amount of tokens that an owner allowed to a spender and execute a call with the sent data. approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_data\":\"ABI-encoded contract call to call `_spender` address.\",\"_spender\":\"The address which will spend the funds.\",\"_subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to `approve` that can be used as a mitigation for problems described in `IERC20.approve`.     * Emits an `Approval` event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address.\"},\"increaseApprovalAndCall(address,uint256,bytes)\":{\"details\":\"Addition to IERC20 methods. Increase the amount of tokens that an owner allowed to a spender and execute a call with the sent data. approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_addedValue\":\"The amount of tokens to increase the allowance by.\",\"_data\":\"ABI-encoded contract call to call `_spender` address.\",\"_spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"See `IERC20.totalSupply`.\"},\"transfer(address,uint256)\":{\"details\":\"See `IERC20.transfer`.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Addition to IERC20 token methods. Transfer tokens to a specified address and execute a call with the sent data on the same transaction\",\"params\":{\"_data\":\"ABI-encoded contract call to call `_to` address.\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amout of tokens to be transfered\"},\"return\":\"true if the call function was executed successfully\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See `IERC20.transferFrom`.     * Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`;     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Addition to IERC20 token methods. Transfer tokens from one address to another and make a contract call on the same transaction\",\"params\":{\"_data\":\"ABI-encoded contract call to call `_to` address.\",\"_from\":\"The address which you want to send tokens from\",\"_to\":\"The address which you want to transfer to\",\"_value\":\"The amout of tokens to be transferred\"},\"return\":\"true if the call function was executed successfully\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/oren/daostack/infra/contracts/test/ERC827TokenMock.sol\":\"ERC827TokenMock\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/oren/daostack/infra/contracts/test/ERC827TokenMock.sol\":{\"keccak256\":\"0x3eee306d24706cf0d5459bf5fd91d817b7e90e13c1551f30a2c7de11005f93bf\",\"urls\":[\"bzz-raw://ec24445c22c4e6f67a45fe95839e8f25482815c7a5b91a53b56326bb49440914\",\"dweb:/ipfs/QmTMhPFg1sfHUVL1VigZbu2ECL83Af98RxT6mP1NFE35X3\"]},\"/Users/oren/daostack/infra/contracts/token/ERC827/ERC827.sol\":{\"keccak256\":\"0x5855b03f13984144bde5a7c61a71659f826de199168166497646eec78bf98e07\",\"urls\":[\"bzz-raw://c60c2b0a086defb023105a896eec085e28e476171fe28c60b1da9112d11a265a\",\"dweb:/ipfs/QmTvx4JgACE1VBr33qCzbAzZD1YTPegzMGwRtDXVdFnDkd\"]},\"/Users/oren/daostack/infra/contracts/token/ERC827/ERC827Token.sol\":{\"keccak256\":\"0xebd0e1ca3f4d32114f905c2b07066381b8df7c5825fc3f04a91be2a78fadc8ef\",\"urls\":[\"bzz-raw://6bb297f542dabf0fae8a497fdbfb62f00b019b86c1dc2e7d480d2b93c79a9a4d\",\"dweb:/ipfs/QmYiG8LF8uM3sramLqvmgp8qis5szvNgceDLbEVBPfr3fM\"]},\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"keccak256\":\"0x0d4306da5305cb78f09c70c18ec86dbc66f22fa5ade90edc20e1ab88e16d4d10\",\"urls\":[\"bzz-raw://c89dee1b8e96cb83f529b8b5c93be6b420c1913363a3fed01241942f08cc968f\",\"dweb:/ipfs/QmfWWwzg9hah3YwZRFWvAwq91HLjCHkKnxXqP6uLGURUou\"]},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x4ccf2d7b51873db1ccfd54ca2adae5eac3b184f9699911ed4490438419f1c690\",\"urls\":[\"bzz-raw://d62d769b2219d5de39013093412623e624fa887f871826ea3bae6052ee893610\",\"dweb:/ipfs/QmV3yVktya1s617QmuzQR2CfuJgUi3dR2xEZY9ecmqZ2G1\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xec9f5e2dd33c13f1c1a63b22257724b61d2af536a2d22b2343144e1044b005fe\",\"urls\":[\"bzz-raw://ed49a07c7fa5f07a2e5fff28f07933bf56f8fd932be3c90e797e4d5c4689f94f\",\"dweb:/ipfs/QmdNEMKyATnnccVv8kip5eZFyuY77PU9SrBYVptioZC6pV\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzz-raw://d0abb99bb8bfc2bc0a89902b8ed1dc0442ad08cc78cee64c291b3df6a27bcccc\",\"dweb:/ipfs/QmP5NaEwZthQeM2ESz4WTT3osrP7jhbvu7ocbttBi2JAw6\"]},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"keccak256\":\"0xf79d9851c085aa8412e87d7a26d3485488fe12538ecb4e317ce41fc1f2c3a16a\",\"urls\":[\"bzz-raw://6af1a35ad6aed2169ce9f44095438b3192cd6066903908f769d5c49a06a0caf8\",\"dweb:/ipfs/QmaH41CwJ7WrMQwSnbfCKuL2pd8bxF7sbGSLPZb6JaHBFF\"]}},\"version\":1}","sourceMap":"102:171:5:-;;;149:121;8:9:-1;5:2;;;30:1;27;20:12;5:2;149:121:5;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;149:121:5;;;;;;;226:37;149:121;;-1:-1:-1;;;;;226:5:5;:37;:::i;:::-;149:121;;102:171;;5864:302:22;-1:-1:-1;;;;;5939:21:22;;5931:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6022:24;6039:6;6022:12;;:16;;;;;;:24;;;;:::i;:::-;6007:12;:39;-1:-1:-1;;;;;6077:18:22;;;;;;:9;:18;;;;;;;;;:30;;6100:6;;6077:22;;;;;:30;;:::i;:::-;-1:-1:-1;;;;;6056:18:22;;;;;;:9;:18;;;;;;;;:51;;;;6122:37;;;;;;;6056:18;;;;6122:37;;;;;;;;;;5864:302;;:::o;834:176:20:-;892:7;923:5;;;946:6;;;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;834:176;-1:-1:-1;;;834:176:20:o;102:171:5:-;;;;;;;","deployedSourceMap":"102:171:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2557:147:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2557:147:22;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2557:147:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1632:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1632:89:22;;;:::i;:::-;;;;;;;;;;;;;;;;3161:231;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3161:231:22;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3161:231:22;;;;;;;;;;;;;;;;;:::i;3787:207::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3787:207:22;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3787:207:22;;;;;;;;:::i;2069:396:9:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;2069:396:9;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;2069:396:9;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2069:396:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2069:396:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;2069:396:9;;-1:-1:-1;2069:396:9;;-1:-1:-1;;;;;2069:396:9:i;1779:108:22:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1779:108:22;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1779:108:22;-1:-1:-1;;;;;1779:108:22;;:::i;3960:444:9:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;3960:444:9;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;3960:444:9;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3960:444:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3960:444:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3960:444:9;;-1:-1:-1;3960:444:9;;-1:-1:-1;;;;;3960:444:9:i;4481:217:22:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4481:217:22;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4481:217:22;;;;;;;;:::i;2090:139::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2090:139:22;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2090:139:22;;;;;;;;:::i;2937:426:9:-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;2937:426:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;2937:426:9;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2937:426:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2937:426:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;2937:426:9;;-1:-1:-1;2937:426:9;;-1:-1:-1;;;;;2937:426:9:i;1224:415::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;1224:415:9;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;1224:415:9;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1224:415:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1224:415:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1224:415:9;;-1:-1:-1;1224:415:9;;-1:-1:-1;;;;;1224:415:9:i;5006:454::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;5006:454:9;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;5006:454:9;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5006:454:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;5006:454:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;5006:454:9;;-1:-1:-1;5006:454:9;;-1:-1:-1;;;;;5006:454:9:i;2287:132:22:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2287:132:22;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2287:132:22;;;;;;;;;;:::i;2557:147::-;2622:4;2638:38;2647:12;:10;:12::i;:::-;2661:7;2670:5;2638:8;:38::i;:::-;-1:-1:-1;2693:4:22;2557:147;;;;:::o;1632:89::-;1702:12;;1632:89;:::o;3161:231::-;3240:4;3256:26;3266:4;3272:2;3276:5;3256:9;:26::i;:::-;3292:72;3301:4;3307:12;:10;:12::i;:::-;-1:-1:-1;;;;;3321:17:22;;;;;;:11;:17;;;;;:42;;3357:5;;3321:17;3339:12;:10;:12::i;:::-;-1:-1:-1;;;;;3321:31:22;;;;;;;;;;;;-1:-1:-1;3321:31:22;;;:42;:35;:42;:::i;:::-;3292:8;:72::i;:::-;-1:-1:-1;3381:4:22;3161:231;;;;;:::o;3787:207::-;3867:4;3883:83;3892:12;:10;:12::i;:::-;3906:7;3915:50;3954:10;3915:11;:25;3927:12;:10;:12::i;:::-;-1:-1:-1;;;;;3915:25:22;;;;;;;;;;;;;;;;;-1:-1:-1;3915:25:22;;;:34;;;;;;;;;;;:50;:38;:50;:::i;2069:396:9:-;2209:4;-1:-1:-1;;;;;2237:20:9;;2252:4;2237:20;;2229:29;;;;;;2269:27;2284:3;2289:6;2269:14;:27::i;:::-;;2362:12;2379:3;-1:-1:-1;;;;;2379:8:9;2394:9;2405:5;2379:32;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2379:32:9;;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2361:50:9;;;2429:7;2421:16;;;;;;-1:-1:-1;2454:4:9;;2069:396;-1:-1:-1;;;;2069:396:9:o;1779:108:22:-;-1:-1:-1;;;;;1862:18:22;1836:7;1862:18;;;:9;:18;;;;;;;1779:108::o;3960:444:9:-;4118:4;-1:-1:-1;;;;;4146:25:9;;4166:4;4146:25;;4138:34;;;;;;4183:46;4207:8;4217:11;4183:23;:46::i;4481:217:22:-;4566:4;4582:88;4591:12;:10;:12::i;:::-;4605:7;4614:55;4653:15;4614:11;:25;4626:12;:10;:12::i;:::-;-1:-1:-1;;;;;4614:25:22;;;;;;;;;;;;;;;;;-1:-1:-1;4614:25:22;;;:34;;;;;;;;;;;:55;:38;:55;:::i;2090:139::-;2151:4;2167:34;2177:12;:10;:12::i;:::-;2191:2;2195:5;2167:9;:34::i;2937:426:9:-;3096:4;-1:-1:-1;;;;;3124:20:9;;3139:4;3124:20;;3116:29;;;;;;3156:38;3175:5;3182:3;3187:6;3156:18;:38::i;:::-;;3260:12;3277:3;-1:-1:-1;;;;;3277:8:9;3292:9;3303:5;3277:32;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3277:32:9;;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3259:50:9;;;3327:7;3319:16;;;;;;-1:-1:-1;3352:4:9;;2937:426;-1:-1:-1;;;;;2937:426:9:o;1224:415::-;1368:4;-1:-1:-1;;;;;1396:25:9;;1416:4;1396:25;;1388:34;;;;;;1433:31;1447:8;1457:6;1433:13;:31::i;5006:454::-;5169:4;-1:-1:-1;;;;;5197:25:9;;5217:4;5197:25;;5189:34;;;;;;5234:51;5258:8;5268:16;5234:23;:51::i;2287:132:22:-;-1:-1:-1;;;;;2385:18:22;;;2359:7;2385:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;2287:132::o;791:88:17:-;862:10;791:88;:::o;7210:329:22:-;-1:-1:-1;;;;;7302:19:22;;7294:68;;;;-1:-1:-1;;;7294:68:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7380:21:22;;7372:68;;;;-1:-1:-1;;;7372:68:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7451:18:22;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:35;;;7501:31;;;;;;;;;;;;;;;;;7210:329;;;:::o;5172:422::-;-1:-1:-1;;;;;5269:20:22;;5261:70;;;;-1:-1:-1;;;5261:70:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5349:23:22;;5341:71;;;;-1:-1:-1;;;5341:71:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5443:17:22;;;;;;:9;:17;;;;;;:29;;5465:6;5443:29;:21;:29;:::i;:::-;-1:-1:-1;;;;;5423:17:22;;;;;;;:9;:17;;;;;;:49;;;;5505:20;;;;;;;:32;;5530:6;5505:32;:24;:32;:::i;:::-;-1:-1:-1;;;;;5482:20:22;;;;;;;:9;:20;;;;;;;;;:55;;;;5552:35;;;;;;;5482:20;;5552:35;;;;;;;;;;;;;5172:422;;;:::o;1274:179:20:-;1332:7;1364:1;1359;:6;;1351:49;;;;;-1:-1:-1;;;1351:49:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1422:5:20;;;1274:179::o;834:176::-;892:7;923:5;;;946:6;;;;938:46;;;;;-1:-1:-1;;;938:46:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;834:176;-1:-1:-1;;;834:176:20:o","source":"pragma solidity ^0.5.11;\n\nimport \"../token/ERC827/ERC827Token.sol\";// mock class using ERC827 Token\n\n\ncontract ERC827TokenMock is ERC827Token {\n\n    constructor(address initialAccount, uint256 initialBalance) public {\n        _mint(initialAccount, initialBalance);\n    }\n\n}\n","sourcePath":"/Users/oren/daostack/infra/contracts/test/ERC827TokenMock.sol","ast":{"absolutePath":"/Users/oren/daostack/infra/contracts/test/ERC827TokenMock.sol","exportedSymbols":{"ERC827TokenMock":[966]},"id":967,"nodeType":"SourceUnit","nodes":[{"id":949,"literals":["solidity","^","0.5",".11"],"nodeType":"PragmaDirective","src":"0:24:5"},{"absolutePath":"/Users/oren/daostack/infra/contracts/token/ERC827/ERC827Token.sol","file":"../token/ERC827/ERC827Token.sol","id":950,"nodeType":"ImportDirective","scope":967,"sourceUnit":1585,"src":"26:41:5","symbolAliases":[],"unitAlias":""},{"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":951,"name":"ERC827Token","nodeType":"UserDefinedTypeName","referencedDeclaration":1584,"src":"130:11:5","typeDescriptions":{"typeIdentifier":"t_contract$_ERC827Token_$1584","typeString":"contract ERC827Token"}},"id":952,"nodeType":"InheritanceSpecifier","src":"130:11:5"}],"contractDependencies":[1352,1584,5821,6635,6704,6786],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":966,"linearizedBaseContracts":[966,1584,1352,6635,6704,5821,6786],"name":"ERC827TokenMock","nodeType":"ContractDefinition","nodes":[{"body":{"id":964,"nodeType":"Block","src":"216:54:5","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":960,"name":"initialAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"232:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":961,"name":"initialBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"248:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":959,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6517,"src":"226:5:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"226:37:5","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":963,"nodeType":"ExpressionStatement","src":"226:37:5"}]},"documentation":null,"id":965,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"name":"initialAccount","nodeType":"VariableDeclaration","scope":965,"src":"161:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"161:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":956,"name":"initialBalance","nodeType":"VariableDeclaration","scope":965,"src":"185:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"185:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"160:48:5"},"returnParameters":{"id":958,"nodeType":"ParameterList","parameters":[],"src":"216:0:5"},"scope":966,"src":"149:121:5","stateMutability":"nonpayable","superFunction":null,"visibility":"public"}],"scope":967,"src":"102:171:5"}],"src":"0:274:5"},"legacyAST":{"absolutePath":"/Users/oren/daostack/infra/contracts/test/ERC827TokenMock.sol","exportedSymbols":{"ERC827TokenMock":[966]},"id":967,"nodeType":"SourceUnit","nodes":[{"id":949,"literals":["solidity","^","0.5",".11"],"nodeType":"PragmaDirective","src":"0:24:5"},{"absolutePath":"/Users/oren/daostack/infra/contracts/token/ERC827/ERC827Token.sol","file":"../token/ERC827/ERC827Token.sol","id":950,"nodeType":"ImportDirective","scope":967,"sourceUnit":1585,"src":"26:41:5","symbolAliases":[],"unitAlias":""},{"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":951,"name":"ERC827Token","nodeType":"UserDefinedTypeName","referencedDeclaration":1584,"src":"130:11:5","typeDescriptions":{"typeIdentifier":"t_contract$_ERC827Token_$1584","typeString":"contract ERC827Token"}},"id":952,"nodeType":"InheritanceSpecifier","src":"130:11:5"}],"contractDependencies":[1352,1584,5821,6635,6704,6786],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":966,"linearizedBaseContracts":[966,1584,1352,6635,6704,5821,6786],"name":"ERC827TokenMock","nodeType":"ContractDefinition","nodes":[{"body":{"id":964,"nodeType":"Block","src":"216:54:5","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":960,"name":"initialAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"232:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":961,"name":"initialBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"248:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":959,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6517,"src":"226:5:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"226:37:5","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":963,"nodeType":"ExpressionStatement","src":"226:37:5"}]},"documentation":null,"id":965,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"name":"initialAccount","nodeType":"VariableDeclaration","scope":965,"src":"161:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"161:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":956,"name":"initialBalance","nodeType":"VariableDeclaration","scope":965,"src":"185:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"185:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"160:48:5"},"returnParameters":{"id":958,"nodeType":"ParameterList","parameters":[],"src":"216:0:5"},"scope":966,"src":"149:121:5","stateMutability":"nonpayable","superFunction":null,"visibility":"public"}],"scope":967,"src":"102:171:5"}],"src":"0:274:5"},"compiler":{"name":"solc","version":"0.5.11+commit.c082d0b4.Emscripten.clang"},"networks":{},"schemaVersion":"3.0.14","updatedAt":"2019-10-30T21:25:55.165Z","devdoc":{"methods":{"allowance(address,address)":{"details":"See `IERC20.allowance`."},"approve(address,uint256)":{"details":"See `IERC20.approve`.     * Requirements:     * - `spender` cannot be the zero address."},"approveAndCall(address,uint256,bytes)":{"details":"Addition to IERC20 token methods. It allows to approve the transfer of value and execute a call with the sent data. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729","params":{"_data":"ABI-encoded contract call to call `_spender` address.","_spender":"The address that will spend the funds.","_value":"The amount of tokens to be spent."},"return":"true if the call function was executed successfully"},"balanceOf(address)":{"details":"See `IERC20.balanceOf`."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to `approve` that can be used as a mitigation for problems described in `IERC20.approve`.     * Emits an `Approval` event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"decreaseApprovalAndCall(address,uint256,bytes)":{"details":"Addition to IERC20 methods. Decrease the amount of tokens that an owner allowed to a spender and execute a call with the sent data. approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol","params":{"_data":"ABI-encoded contract call to call `_spender` address.","_spender":"The address which will spend the funds.","_subtractedValue":"The amount of tokens to decrease the allowance by."}},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to `approve` that can be used as a mitigation for problems described in `IERC20.approve`.     * Emits an `Approval` event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."},"increaseApprovalAndCall(address,uint256,bytes)":{"details":"Addition to IERC20 methods. Increase the amount of tokens that an owner allowed to a spender and execute a call with the sent data. approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol","params":{"_addedValue":"The amount of tokens to increase the allowance by.","_data":"ABI-encoded contract call to call `_spender` address.","_spender":"The address which will spend the funds."}},"totalSupply()":{"details":"See `IERC20.totalSupply`."},"transfer(address,uint256)":{"details":"See `IERC20.transfer`.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferAndCall(address,uint256,bytes)":{"details":"Addition to IERC20 token methods. Transfer tokens to a specified address and execute a call with the sent data on the same transaction","params":{"_data":"ABI-encoded contract call to call `_to` address.","_to":"address The address which you want to transfer to","_value":"uint256 the amout of tokens to be transfered"},"return":"true if the call function was executed successfully"},"transferFrom(address,address,uint256)":{"details":"See `IERC20.transferFrom`.     * Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`;     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`."},"transferFromAndCall(address,address,uint256,bytes)":{"details":"Addition to IERC20 token methods. Transfer tokens from one address to another and make a contract call on the same transaction","params":{"_data":"ABI-encoded contract call to call `_to` address.","_from":"The address which you want to send tokens from","_to":"The address which you want to transfer to","_value":"The amout of tokens to be transferred"},"return":"true if the call function was executed successfully"}}},"userdoc":{"methods":{}}}